@page "/Admin/SystemRoleList"

@attribute [Authorize(Roles = "Admin, SuperAdmin")]
@inject IJSRuntime js
@inject IHttpContextAccessor HttpContextAccessor
@inject RoleManager<IdentityRole> roleManager

<h1 class="ml-2">System Roles</h1>
<div class="container-fluid">
    <div class="alert alert-@AlertType alert-dismissable text-center" role="alert" hidden="@HideAlert">
        <button type = "button" class = "close" data-dismiss="alert" @onclick="@(() => resetalert())" aria-hidden = "true">
            ×
        </button>
      @AlertMessage
    </div>
    <EditForm Model="@role" OnValidSubmit="@SaveGeneralInformation" class="">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group card">
            <div class="card-header">
                <h3 class="mb-3 ">New Role</h3>
            </div>
            <div class="card-body">               
                <div class="form-row">
                    <div class="form-group col-sm-12 col-md-4">
                        <InputText @bind-Value="role.Name" class="form-control" placeholder="Role Name" />
                    </div>
                </div>
            </div>
            <div class="card-footer">
                <button type="submit" class="btn btn-success mr-2 btn-sm">Save</button>
                <button type="button" class="btn btn-danger btn-sm" @onclick="@(() => Clear())">Cancel</button>
            </div>
        </div>
    </EditForm>
    <h3 class="mb-3 ">System Role List</h3>
    <table class="table table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>Role Name</th>
                <AuthorizeView Roles="Admin, SuperAdmin">
                    <th colspan="2">Actions</th>
                </AuthorizeView>
            </tr>
        </thead>
        <tbody>
            @if (RoleList == null)
            {
                <tr>
                    <td colspan="2">Loading...</td>
                </tr>
            }
            else if (RoleList.Count() == 0)
            {
                <tr>
                    <td colspan="2">No process roles registered!</td>
                </tr>
            }
            else
            {
                @foreach (var c in RoleList)
                {
                    <tr>
                        <td>@c.Name</td>
                        <AuthorizeView Roles="Admin, SuperAdmin">
                            <td>
                                <button class="btn btn-primary btn-sm" @onclick="@(async () => await ToEdit(c.Id))">Edit</button>
                                <button class="btn btn-danger btn-sm" @onclick="@(async () => await MarkAsDeleted(c.Id))">Delete</button>
                            </td>
                        </AuthorizeView>
                    </tr>

                }
            }

        </tbody>
    </table>
</div>

@code {
    QAD_QMSContext db = new QAD_QMSContext();
    IdentityRole role = new IdentityRole();
    public string loggedInUser = string.Empty;
    public IEnumerable<AspNetRoles> RoleList { get; set; }
    public bool HideAlert { get; set; } = true;
    public string AlertMessage { get; set; } = string.Empty;
    public string AlertType { get; set; } = "danger";
    private void resetalert()
    {
        AlertMessage = string.Empty;
        AlertType = "danger";
        HideAlert = true;
    }
    private void AlertShow(string type, string msg)
    {
        AlertMessage = msg;
        AlertType = type;
        HideAlert = false;
    }
    public async Task SaveGeneralInformation()
    {
        bool exists = await roleManager.RoleExistsAsync(role.Name);
        if (!exists)
        {
            try
            {
                await roleManager.CreateAsync(role);
                await db.SaveChangesAsync();
                RoleList = await GetRoleList();
                Clear();
                setUser();
            }
            catch (Exception ex)
            {
                ex.InnerException.ToString();
                ex.Message.ToString();
            }
        }
        else
        {
            try
            {
                await roleManager.UpdateAsync(role);
            }
            catch (Exception ex)
            {
                ex.InnerException.ToString();
                ex.Message.ToString();
            }
        }

    }
    protected void Clear()
    {
        role = new IdentityRole();
    }
    protected override async Task OnInitializedAsync()
    {
        setUser();
        RoleList = await GetRoleList();
    }
    public void setUser()
    {
        var principal = HttpContextAccessor.HttpContext.User;
        loggedInUser = principal.FindFirstValue(ClaimTypes.NameIdentifier).ToString();
    }
    public async Task<IEnumerable<AspNetRoles>> GetRoleList()
    {
        return await db.AspNetRoles.ToListAsync();
    }
    protected async Task MarkAsDeleted(string id)
    {
        bool confirmed = await js.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            var role = await roleManager.FindByIdAsync(id);
            await roleManager.DeleteAsync(role);
            await db.SaveChangesAsync();
            RoleList = await GetRoleList();
            Clear();
            setUser();
        }

    }
    protected async Task ToEdit(string id)
    {
        role = await roleManager.FindByIdAsync(id);
    }
}