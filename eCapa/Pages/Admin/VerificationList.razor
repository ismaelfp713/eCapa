@page "/verification"
@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime js

<AuthorizeView>
    <div class="card">
        <div class="card-body">
            <h1>Verification of Implementation</h1>
            <div class="alert alert-@AlertType alert-dismissable text-center" role="alert" hidden="@HideAlert">
                <button type="button" class="close" data-dismiss="alert" @onclick="@(() => resetalert())" aria-hidden="true">
                    ×
                </button>
                @AlertMessage
            </div>
            <div class="alert alert-primary" role="alert">
                Review the task for proper implementation.
            </div>
            <div>
                <h3>Immediate Containment Actions</h3>
                <div class="table-responsive">
                    <table class="table table-bordered table-striped table-sm small">
                        <thead class="thead-light">
                            <tr>
                                <th class="text-center">CAPA</th>
                                <th class="text-center">Action</th>
                                <th class="text-center">Status</th>
                                <th class="text-center">Verification Status</th>
                                <th class="text-center">Type</th>
                                <th class="text-center">Due Date</th>
                                <th class="text-center">Verification Due Date</th>
                                <th class="text-center">Owner Delays Requested</th>
                                <th class="text-center">Verification Delayed</th>
                                <th class="text-center">Verification Delay Request</th>
                                <th class="text-center">Verification Date</th>
                                <th class="text-center">Verified?</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (ContainmentList != null)
                            {
                                if (ContainmentList.Count() == 0)
                                {
                                    <tr><td colspan="13">No tasks pending</td></tr>
                                }
                                foreach (var c in ContainmentList)
                                {
                                    <tr>
                                        <td class="text-center"><a href="#" @onclick="@(() => navigateCapa(c.GeneralInformartionId.ToString(), "d3"))">@c.GeneralInformartion.CapaNumber</a></td>
                                        <td>@c.Action</td>
                                        <td class="text-center">@c.Status</td>
                                        <td class="text-center">@c.EffectivenessVerificationStatusOne</td>
                                        <td class="text-center">Containment</td>
                                        <td class="text-center">@c.DueDate.ToShortDateString()</td>
                                        <td class="text-center">@c.EffectivenessVerificationDateOne?.ToShortDateString()</td>
                                        <td class="text-center">@c.DelayCount</td>
                                        @if (c.EffectivenessVerificationDelayRequestedOne == true)
                                        {
                                            <td class="text-center">Yes</td>
                                        }
                                        else
                                        {
                                            <td class="text-center">No</td>
                                        }
                                        @if (c.EffectivenessVerificationDelayRequestedOnOne != null)
                                        {
                                            <td class="text-center">@c.EffectivenessVerificationDelayRequestedOnOne</td>
                                        }
                                        else
                                        {
                                            <td></td>
                                        }
                                        <td>@c.EffectivenessVerifiedOnOne?.ToShortDateString()</td>

                                        @if (c.EffectivenessVerificationStatusOne == "Approved")
                                        {
                                            <td class="text-center"><span disabled class="oi oi-check border-info text-success icon" aria-hidden="true"></span></td>
                                        }
                                        else
                                        {
                                            <td class="text-center"><span class="oi oi-circle-x border-info text-danger icon" aria-hidden="true"></span></td>
                                        }
                                    </tr>
                                }
                            }                                                    
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <div class="card mt-2">
        <div class="card-body">
            <h3>Permanent Corrective Actions</h3>
            <div class="table-responsive">
                <table class="table table-bordered table-striped table-sm small">
                    <thead class="thead-light">
                        <tr>
                            <th class="text-center">CAPA</th>
                            <th class="text-center">Action</th>
                            <th>Owner</th>
                            <th class="text-center">Status</th>
                            <th class="text-center">Type</th>
                            <th class="text-center">Due Date</th>
                            <th class="text-center">Verification Due</th>
                            <th class="text-center">Verification Status</th>
                            <th class="text-center">Owner Delays</th>
                            <th class="text-center">Verification Delayed</th>
                            <th class="text-center">Verification Delay Request</th>
                            <th class="text-center">Verification Date</th>
                            <th class="text-center">Verified?</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (TaskList != null)
                        {
                            if (TaskList.Count() == 0)
                            {
                                <tr>
                                    <td colspan="13">No tasks pending</td>
                                </tr>
                            }
                            else
                            {
                                foreach (var a in TaskList)
                                {
                    <tr>
                        <td class="text-center"><a href="#" @onclick="@(() => navigateCapa(a.GeneralInformartionId.ToString(), "implementation"))">@a.IdActionPlanNavigation.GeneralInformartion.CapaNumber</a></td>
                        <td>@a.Action</td>
                        <td>@a.OwnerNavigation.NormalizedUserName.Substring(0, a.OwnerNavigation.NormalizedUserName.LastIndexOf("@"))</td>
                        <td class="text-center">@a.Status</td>

                        <td class="text-center">@a.Type</td>
                        <td class="text-center">@a.DueDate.ToShortDateString()</td>
                        <td class="text-center">@a.EffectivenessVerificationDateOne?.ToShortDateString()</td>
                        <td class="text-center">@a.EffectivenessVerificationStatusOne</td>
                        <td class="text-center">@a.DelayCount</td>
                        @if (a.EffectivenessVerificationDelayRequestedOne == true)
                        {
                            <td class="text-center">Yes</td>
                        }
                        else
                        {
                            <td class="text-center">No</td>
                        }
                        @if (a.EffectivenessVerificationDelayRequestedOnOne != null)
                        {
                            <td class="text-center">@a.EffectivenessVerificationDelayRequestedOnOne</td>
                        }
                        else
                        {
                            <td></td>
                        }
                    <td>@a.EffectivenessVerifiedOnOne?.ToShortDateString()</td>

                        @if (a.EffectivenessVerificationStatusOne == "Approved")
                        {
                            <td class="text-center"><span disabled class="oi oi-check border-info text-success icon" aria-hidden="true"></span></td>
                        }
                        else
                        {
                            <td class="text-center"><span class="oi oi-circle-x border-info text-danger icon" aria-hidden="true"></span></td>
                        }
                    </tr>
                                }
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="card-footer">
            <a href="/" class="btn btn-info  bn-sm float-left" >Home</a>
        </div>
    </div>
    @if (DeleteDialogOpen)
    {
        <ModalDelayContainment Title="Delay Task"
                               IdContainment="@idtopass"
                               OnClose="@OnDeleteDialogClose">
        </ModalDelayContainment>
    }
    @if (DeleteDialogOpenActions)
    {
        <ModalDelayActions Title="Delay Task"
                           IdAction="@idtopass"
                           OnClose="@OnDeleteDialogActionsClose">
        </ModalDelayActions>
    }

    @if (DialogOpenContainment)
    {
        <ModalContainmentValidate Title="Verification of Implementation:"
                                  IdContainment="@idtopass"
                                  OnClose="@OnDialogContainmentClose">
        </ModalContainmentValidate>
    }
    @if (DialogOpenAction)
    {
        <ModalActionValidate Title="Task Information:"
                             IdAction="@idtopass"
                             OnClose="@OnDialogActionClose">
        </ModalActionValidate>
    }
</AuthorizeView>

@code{
    public bool DeleteDialogOpen { get; set; }
    public bool DeleteDialogOpenActions { get; set; }
    public bool DialogOpenContainment { get; set; }
    public bool DialogOpenAction { get; set; }
    private readonly IWebHostEnvironment _environment;
    QAD_QMSContext db = new QAD_QMSContext();
    public IEnumerable<DfiveActions> TaskList { get; set; }
    public IEnumerable<Dthree> ContainmentList { get; set; }
    private string idtopass { get; set; }
    public string loggedInUser { get; set; }
    public int CapaId { get; set; }
    [Parameter]
    public string IdCar { get; set; }
    public bool HideAlert { get; set; } = true;
    public string AlertMessage { get; set; } = string.Empty;
    public string AlertType { get; set; } = "danger";
    private void resetalert()
    {
        AlertMessage = string.Empty;
        AlertType = "danger";
        HideAlert = true;
    }
    private void AlertShow(string type, string msg)
    {
        AlertMessage = msg;
        AlertType = type;
        HideAlert = false;
    }
    protected override async Task OnInitializedAsync()
    {
        CapaId = String.IsNullOrEmpty(IdCar) ? 0 : Convert.ToInt32(IdCar);
        var principal = HttpContextAccessor.HttpContext.User;
        loggedInUser = principal.FindFirstValue(ClaimTypes.NameIdentifier).ToString();
        await Task.WhenAll(Task.Run(() => GetInitialData()));
    }
    protected async Task GetInitialData()
    {
        ContainmentList = new List<Dthree>();
        ContainmentList = await GetContainmentTasks();
        TaskList = new List<DfiveActions>();
        TaskList = await GetTasks();
    }
    protected async Task<IEnumerable<DfiveActions>> GetTasks()
    {
        TaskList = await db.DfiveActions       
        .Where
        (
            x => x.IdActionPlanNavigation.GeneralInformartion.Verifier == loggedInUser &&
            x.IsDeleted == false &&
            x.EffectivenessVerificationStatusOne == "Pending"
            //x.EffectivenessVerificationStatusTwo == "Pending" ||
            //x.EffectivenessVerificationStatusThree == "Pending"
        )
        .Include(x => x.IdActionPlanNavigation).ThenInclude(x => x.GeneralInformartion).ThenInclude(x => x.CreatedByNavigation)
        .Include(x => x.OwnerNavigation)
        .ToListAsync();
        return TaskList;
    }
    protected async Task<IEnumerable<Dthree>> GetContainmentTasks()
    {
        ContainmentList = await db.Dthree
        .Include
        (
            x => x.GeneralInformartion
        )
        .Include
        (
            x => x.ResponsibleNavigation
        )
        .Where
        (
            x => x.GeneralInformartion.Verifier == loggedInUser &&
            x.IsDeleted == false &&
            x.EffectivenessVerificationStatusOne == "Pending"
            //x.EffectivenessVerificationStatusTwo == "Pending" ||
            //x.EffectivenessVerificationStatusThree == "Pending"
            ).ToListAsync();
        return ContainmentList;
    }
    protected void navigate()
    {
        NavigationManager.NavigateTo($"/Admin/verification/{IdCar}");
    }
    protected void navigateCapa(string id, string action)
    {
        NavigationManager.NavigateTo($"/Admin/{action}/{id}");
    }
    protected void Alert(Dthree containment)
    {
        if (containment.DelayCount >= 3)
        {
            AlertShow("danger", "Cannot delay this action, it has been delayed the 3 times permitted!");
            return;
        }
        else
        {
            OpenDeleteDialog(containment.IdDthree.ToString());
        }
    }
    protected void AlertActions(DfiveActions actions)
    {
        if (actions.DelayCount >= 3)
        {
            AlertShow("danger", "Cannot delay this action, it has been delayed the 3 times permitted!");
            return;
        }
        else
        {
            OpenDeleteActionsDialog(actions.IdFive.ToString());
        }
    }
    private async Task OnDeleteDialogClose()
    {
        await Task.Run(() => DeleteDialogOpen = false);
        StateHasChanged();
        if (string.IsNullOrEmpty(IdCar))
        {
            NavigationManager.NavigateTo($"verification", true);
        }
        else
        {
            NavigationManager.NavigateTo($"/Admin/verification/{CapaId}", true);
        }
    }
    private void OpenDeleteDialog(string id)
    {
        idtopass = id;
        DeleteDialogOpen = true;
        StateHasChanged();
    }
    private async Task OnDeleteDialogActionsClose()
    {
        await Task.Run(() => DeleteDialogOpenActions = false);
        StateHasChanged();
        if(string.IsNullOrEmpty(IdCar))
        {
            NavigationManager.NavigateTo($"verification", true);
        }
        else
        {
            NavigationManager.NavigateTo($"/Admin/verification/{CapaId}", true);
        }

    }
    private void OpenDeleteActionsDialog(string id)
    {
        idtopass = id;
        DeleteDialogOpenActions = true;
        StateHasChanged();
    }
    private async Task OnDialogContainmentClose()
    {
        await Task.Run(() => DialogOpenContainment = false);
        StateHasChanged();
        if (string.IsNullOrEmpty(IdCar))
        {
            NavigationManager.NavigateTo($"verification", true);
        }
        else
        {
            NavigationManager.NavigateTo($"/Admin/verification/{CapaId}", true);
        }
    }
    private void OpenContainmentDialog(string id)
    {
        idtopass = id;
        DialogOpenContainment = true;
        StateHasChanged();
    }
    private async Task OnDialogActionClose()
    {
        await Task.Run(() => DialogOpenAction = false);
        StateHasChanged();
        if (string.IsNullOrEmpty(IdCar))
        {
            NavigationManager.NavigateTo($"verification", true);
        }
        else
        {
            NavigationManager.NavigateTo($"/Admin/verification/{CapaId}", true);
        }
    }
    private void OpenActionDialog(string id)
    {
        idtopass = id;
        DialogOpenAction = true;
        StateHasChanged();
    }

}

