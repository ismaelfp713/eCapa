@page "/Horizontal"
@attribute [Authorize(Roles = "Admin, SuperAdmin, Manager, QaManager,FunctionalManager,Verifier")]
@inject IJSRuntime js
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager


<h1 class="ml-2">Horizontal 8D</h1>
<div class="container-fluid">
    <div class="table-responsive" width="400px">
        <div class="form-group">
            <input class="form-control" type="text" placeholder="Filter..."
                   @bind="Filter"
                   @bind:event="oninput">
        </div>        
        <table id="example" class="table table-striped table-bordered display" style="width:100%">
            <thead class="thead-dark">
                <tr>
                    <th  style="cursor:pointer">Detail</th>
                    <th>CapaNumber</th>
                    <th>Owner</th>
                    <th>Type</th>
                    <th>Audit Number</th>
                    <th>Customer</th>
                    <th>Source</th>
                    <th>Standard</th>
                    <th>Symptom</th>
                    <th>Status</th>
                    <AuthorizeView Roles="SuperAdmin">
                        <th colspan="3">Actions</th>
                    </AuthorizeView>
                </tr>
            </thead>
            <tbody>
                @if (EightList == null)
                {
                    <tr>
                        <td colspan="10">Loading...</td>
                    </tr>
                }
                else if (EightList.Count() == 0)
                {
                    <tr>
                        <td colspan="10">No capa's registered!</td>
                    </tr>
                }
                else
                {
                    int i = 0;
                    @foreach (var d in EightList)
                    {
                       
                        if (!IsVisible(d))
                            continue;
                        <tr id="@i">
                            <td class="align-content-center"><a @onclick="@(async () => await Toggle(d.GeneralInformartionId, i))"><span class="@icon" aria-hidden="true"></span></a></td>
                            <td><a href="#" @onclick="@(() => navigate(d.GeneralInformartionId.ToString()))">@d.CapaNumber</a></td>
                            <td>@d.OwnerNavigation.NormalizedUserName.Substring(0,d.OwnerNavigation.NormalizedUserName.LastIndexOf("@"))</td>
                            <td>@d.Type</td>
                            <td>@d.AuditReportNumber</td>
                            <td>@d.Customer.CustomerName</td>
                            <td>@d.Source</td>
                            <td>@d.Standard</td>
                            <td>@d.Symptom</td>
                            <td>@d.Status</td>
                            <AuthorizeView Roles="SuperAdmin">
                                <td class="text-center">
                                    <span class="oi oi-trash icon text-danger" @onclick="@(async () => await MarkAsDeleted(d.GeneralInformartionId))"></span>
                                </td>
                            </AuthorizeView>
                        </tr>
                        @if (CaList != null)
                        {
                            if (CaList.Count() > 0)
                            {
                                <tr><td colspan="10" class="text-center"><strong>Containment Actions</strong></td></tr>
                                @foreach (var action in CaList)
                                {
                                    if (d.GeneralInformartionId == action.GeneralInformartionId)
                                    {
                                        <tr>
                                            <td></td>
                                            <td colspan="6">@action.Action</td>
                                            <td>@action.ResponsibleNavigation.NormalizedUserName.Substring(0, action.ResponsibleNavigation.NormalizedUserName.LastIndexOf("@"))</td>
                                            <td>@action.DueDate.ToShortDateString()</td>
                                            <td>@action.ActualClosedDate?.ToShortDateString()</td>
                                        </tr>
                                    }                                   
                                }
                            }
                        }
                    }
                    i++;
                }
            </tbody>
        </table>
    </div>
    </div>
    @code {
        QAD_QMSContext db = new QAD_QMSContext();
        GeneralInformation gen = new GeneralInformation();
        PartNumbers partnumber = new PartNumbers();
        public IEnumerable<Dthree> CaList { get; set; }
        public string loggedInUser = string.Empty;
        public IEnumerable<PartNumbers> PNumbers { get; set; }
        public IEnumerable<Customers> CustomerList { get; set; }
        public IList<GeneralInformation> EightDList { get; set; }
        public IEnumerable<GeneralInformation> EightList { get; set; }
        public string Filter { get; set; }
        public string CustomerId { get; set; }
        public string icon { get; set; } = "oi oi-plus";
        protected override async Task OnInitializedAsync()
        {
            setUser();
            EightList = await GetList(Filter);
        }
        public void setUser()
        {
            var principal = HttpContextAccessor.HttpContext.User;
            loggedInUser = principal.FindFirstValue(ClaimTypes.NameIdentifier).ToString();
        }
        protected async Task MarkAsDeleted(int id)
        {
            bool confirmed = await js.InvokeAsync<bool>("confirm", "Are you sure?");
            if (confirmed)
            {
                var capa = await db.GeneralInformation
                    .Include(x => x.Dtwo)
                    .Include( x => x.Dthree)
                    .Include(x => x.Dfour)
                    .Include(x => x.Dfive)
                    .ThenInclude(x => x.DfiveActions)
                    .FirstOrDefaultAsync(x => x.GeneralInformartionId == id);
                foreach(var dtwo in capa.Dtwo)
                {
                    dtwo.IsDeleted = true;
                    dtwo.LastModifiedBy = loggedInUser;
                    dtwo.LastModifiedOn = DateTime.Now;
                }
                foreach (var dthree in capa.Dthree)
                {
                    dthree.IsDeleted = true;
                    dthree.LastModifiedBy = loggedInUser;
                    dthree.LastModifiedOn = DateTime.Now;
                }
                foreach(var dfour in capa.Dfour)
                {
                    dfour.IsDeleted = true;
                    dfour.LastModifiedBy = loggedInUser;
                    dfour.LastModifiedOn = DateTime.Now;
                }
                foreach (var dfive in capa.Dfive)
                {
                    dfive.IsDeleted = true;
                    dfive.LastModifiedBy = loggedInUser;
                    dfive.LastModifiedOn = DateTime.Now;
                }
                var actions = await db.DfiveActions.Where(x => x.GeneralInformartionId == capa.GeneralInformartionId && x.IsDeleted == false).ToListAsync();
                foreach(var action in actions)
                {
                    action.IsDeleted = true;
                    action.LastModifiedBy = loggedInUser;
                    action.LastModifiedOn = DateTime.Now;
                    db.Update(action);
                }

                capa.DeletedBy = loggedInUser;
                capa.DeletedOn = DateTime.Now;
                capa.LastModifiedBy = loggedInUser;
                capa.LastModifiedOn = DateTime.Now;
                capa.IsDeleted = true;
                db.GeneralInformation.Update(capa);

                await db.SaveChangesAsync();
                setUser();
                EightList = await GetList(Filter);
            }
        }
        protected async Task Toggle(int id, int index)
        {
            if(id > 0)
            {
                CaList = await GetContainmentActionsList(id);
                if(CaList.Count() > 0)
                {
                    icon = "oi oi-minus";
                }
                else
                {

                    icon = "oi oi-plus";
                }

            }
            else
            {
                icon = "oi oi-plus";
            }

        }
        protected async Task<IEnumerable<Dthree>> GetContainmentActionsList(int id)
        {
            CaList = await db.Dthree.Where(x => x.IsDeleted == false && x.GeneralInformartionId == id).Include(a => a.ResponsibleNavigation).ToListAsync();
            return CaList;
        }
        protected async Task ToEdit(int id)
        {
            partnumber = await db.PartNumbers.FirstOrDefaultAsync(x => x.PartNumberId == id);
            CustomerId = partnumber.CustomerId.ToString();
        }
        protected async Task<IEnumerable<GeneralInformation>> GetList(string filter)
        {
            if (string.IsNullOrEmpty(filter))
            {                
                EightList = await db.GeneralInformation
               .Where(x => x.IsDeleted == false)
               .Include(x => x.OwnerNavigation)
               .Include(c => c.Customer)
               .Include(d => d.Dthree)
               .Where(d => d.IsDeleted == false)
               .ToListAsync();
            }
            return EightList;
        }
        protected void navigate(string d)
        {
            NavigationManager.NavigateTo($"/Admin/general/{d}");
        }
        public bool IsVisible(GeneralInformation general)
        {
            if (string.IsNullOrEmpty(Filter))
                return true;

            if (general.CapaNumber.Contains(Filter, StringComparison.OrdinalIgnoreCase) ||
                general.CapaNumber.Contains(Filter, StringComparison.OrdinalIgnoreCase) ||
                general.Customer.CustomerName.Contains(Filter, StringComparison.OrdinalIgnoreCase) ||
                general.Type.Contains(Filter, StringComparison.OrdinalIgnoreCase) ||
                general.Source.Contains(Filter, StringComparison.OrdinalIgnoreCase) ||
                general.Standard.Contains(Filter, StringComparison.OrdinalIgnoreCase) ||
                general.Symptom.Contains(Filter, StringComparison.OrdinalIgnoreCase) ||
                general.Status.Contains(Filter, StringComparison.OrdinalIgnoreCase))
                return true;

            return false;
        }
    }