@page "/Admin/implementation/{IdCar}"
@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime js

<AuthorizeView>
    <div class="card">
        <div class="card-body">
            <h1>D6 - Implement Permenant Corrective Actions</h1>
            <div class="alert alert-primary" role="alert">
                Review the tasks below and document evidence of completion.
            </div>
            <div hidden>
                <h3>Immediate Containment Actions</h3>
                <div class="table-responsive">
                    <table class="table table-bordered table-striped table-sm small">
                        <thead class="thead-light">
                            <tr>
                                <th class="text-center">CAPA</th>
                                <th>Action</th>
                                <th class="text-center">Status</th>
                                <th class="text-center">Type</th>
                                <th class="text-center">Due Date</th>
                                <th class="text-center">Delays Requested</th>
                                <th>Created By</th>
                                <th class="text-center">Implement</th>
                                <th class="text-center">Delay</th>
                            </tr>
                        </thead>
                        <tbody>


                            @if (ContainmentList != null)
                            {
                                if (ContainmentList.Count() == 0)
                                {
                                    <tr><td colspan="9">No tasks pending</td></tr>
                                }
                                foreach (var c in ContainmentList)
                                {
                                    <tr>
                                        <td class="text-center">@c.GeneralInformartion.CapaNumber</td>
                                        <td>@c.Action</td>
                                        <td class="text-center">@c.Status</td>
                                        <td class="text-center">Containment</td>
                                        <td class="text-center">@c.DueDate.ToShortDateString()</td>
                                        <td class="text-center">@c.DelayCount</td>
                                        <td>@c.CreatedByNavigation.UserName</td>
                                        @if (c.Status == "Open")
                                        {
                                            <td class="text-center"><span @onclick="@(()=> OpenContainmentDialog(c.IdDthree.ToString()))" class="oi oi-clipboard border-info text-info icon" aria-hidden="true"></span></td>
                                            <td class="text-center"><span @onclick="@(async ()=> await Alert(c))" class="oi oi-clock border-info text-danger icon" aria-hidden="true"></span></td>
                                        }
                                        else
                                        {
                                            <td class="text-center"><span @onclick="@(()=> OpenContainmentDialog(c.IdDthree.ToString()))" class="oi oi-eye border-info text-primary icon" aria-hidden="true"></span></td>
                                            <td class="text-center"><span class="oi oi-lock-locked border-info text-primary icon" aria-hidden="true"></span></td>
                                        }

                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <div class="card mt-2">
        <div class="card-body">           
            <div class="table-responsive">
                <table class="table table-bordered table-striped table-sm small">
                    <thead class="thead-light">
                        <tr>
                            <th class="text-center">CAPA</th>
                            <th class="text-center">Action</th>
                            <th class="text-center">Status</th>
                            <th class="text-center">Type</th>
                            <th class="text-center">Due Date</th>
                            <th class="text-center">Delays Requested</th>
                            <th>Created By</th>
                            <th class="text-center">Implement</th>
                            <th class="text-center">Delay</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (TaskList != null)
                        {
                            if (TaskList.Count() == 0)
                            {
                                <tr>
                                    <td colspan="9">No tasks pending</td>
                                </tr>
                            }
                            else
                            {
                                foreach (var a in TaskList)
                                {
                                    <tr>
                                        <td class="text-center">@a.IdActionPlanNavigation.GeneralInformartion.CapaNumber</td>
                                        <td>@a.Action</td>
                                        <td class="text-center">@a.Status</td>
                                        <td class="text-center">@a.Type</td>
                                        <td class="text-center">@a.DueDate.ToShortDateString()</td>
                                        <td class="text-center">@a.DelayCount</td>
                                        <td>@a.IdActionPlanNavigation.GeneralInformartion.CreatedByNavigation.NormalizedUserName</td>
                                        @if(a.Status == "Open")
                                        {
                                          <td class="text-center">
                                                            <span @onclick="@(()=> OpenActionDialog(a.IdFive.ToString()))" class="oi oi-clipboard border-info text-info icon" aria-hidden="true"></span>
                                          </td>
                                          <td class="text-center">
                                              <span @onclick="@(async ()=> await AlertActions(a))" class="oi oi-clock border-info text-danger icon" aria-hidden="true"></span>
                                          </td>                                                    
                                        }
                                        else
                                        {
                                            <td class="text-center">
                                                <span @onclick="@(()=> OpenActionDialog(a.IdFive.ToString()))" class="oi oi-eye border-info text-primary icon" aria-hidden="true"></span>
                                            </td>
                                            <td class="text-center">
                                                <span class="oi oi-lock-locked border-info text-primary icon" aria-hidden="true"></span>
                                            </td>
                                        }                                        
                                    </tr>
                                }
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
         <div class="card-footer">           
            <button type="button" class="btn btn-info  bn-sm float-left" @onclick="@(() => navigate())">Back to Main</button>
        </div>
    </div>
    @if (DeleteDialogOpen)
    {
        <ModalDelayContainment Title="Delay Task"
                               IdContainment="@idtopass"
                               OnClose="@OnDeleteDialogClose">
        </ModalDelayContainment>
    }
    @if (DeleteDialogOpenActions)
    {
        <ModalDelayActions Title="Delay Task"
                           IdAction="@idtopass"
                           OnClose="@OnDeleteDialogActionsClose">
        </ModalDelayActions>
    }
    @if (DialogOpenContainment)
    {
        <ModalImplementContainment Title="Implement Task"
                                   IdContainment="@idtopass"
                                   OnClose="@OnDialogContainmentClose">
        </ModalImplementContainment>
    }
    @if (DialogOpenAction)
    {
        <ModalImplementActions Title="Implement Task"
                               IdAction="@idtopass"
                               OnClose="@OnDialogActionClose">
        </ModalImplementActions>
    }
</AuthorizeView>

@code{
    public bool DeleteDialogOpen { get; set; }
    public bool DeleteDialogOpenActions { get; set; }
    public bool DialogOpenContainment { get; set; }
    public bool DialogOpenAction { get; set; }
    private readonly IWebHostEnvironment _environment;
    QAD_QMSContext db = new QAD_QMSContext();
    public IEnumerable<DfiveActions> TaskList { get; set; }
    public IEnumerable<Dthree> ContainmentList { get; set; }
    private string idtopass { get; set; }
    public string loggedInUser { get; set; }
    public int CapaId { get; set; }
    [Parameter]
    public string IdCar { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var principal = HttpContextAccessor.HttpContext.User;
        if (!string.IsNullOrEmpty(IdCar))
        {
            CapaId = Convert.ToInt32(IdCar);
        }
        else
        {
            await js.InvokeAsync<Task>("alert", "Error you will be redirtected!");
            NavigationManager.NavigateTo($"/Admin/implementation/{IdCar}", true);
        }
        loggedInUser = principal.FindFirstValue(ClaimTypes.NameIdentifier).ToString();
        await Task.WhenAll(Task.Run(() => GetInitialData()));

    }
    protected async Task GetInitialData()
    {
        ContainmentList = new List<Dthree>();
        ContainmentList = await GetContainmentTasks();
        TaskList = new List<DfiveActions>();
        TaskList = await GetTasks();
    }
    protected async Task<IEnumerable<DfiveActions>> GetTasks()
    {
        TaskList = await db.DfiveActions.Where(x => x.GeneralInformartionId == CapaId && x.Owner == loggedInUser && x.IsDeleted == false)
        .Include(x => x.IdActionPlanNavigation)
        .ThenInclude(x => x.GeneralInformartion)
        .ThenInclude(x => x.CreatedByNavigation)
        .ToListAsync();
        return TaskList;
    }
    protected async Task<IEnumerable<Dthree>> GetContainmentTasks()
    {
        ContainmentList = await db.Dthree.Where(x => x.GeneralInformartionId == CapaId && x.Responsible == loggedInUser && x.IsDeleted == false)
        .Include(x => x.CreatedByNavigation)
        .Include(x => x.GeneralInformartion)
        .ToListAsync();
        return ContainmentList;
    }
    protected void navigate()
    {
        NavigationManager.NavigateTo($"/Admin/general/{IdCar}", true);
    }
    protected async Task Alert(Dthree containment)
    {
        if (containment.DelayCount >= 3)
        {
            await js.InvokeAsync<Task>("alert", "Cannot delay this action, it has been delayed the 3 times permitted!");
            return;
        }
        else
        {
            OpenDeleteDialog(containment.IdDthree.ToString());
        }
    }
    protected async Task AlertActions(DfiveActions actions)
    {
        if (actions.DelayCount >= 3)
        {
            await js.InvokeAsync<Task>("alert", "Cannot delay this action, it has been delayed the 3 times permitted!");
            return;
        }
        else
        {
            OpenDeleteActionsDialog(actions.IdFive.ToString());
        }
    }
    private async Task OnDeleteDialogClose()
    {
        await Task.Run(() => DeleteDialogOpen = false);
        StateHasChanged();
        NavigationManager.NavigateTo($"/Admin/implementation/{IdCar}", true);
    }
    private void OpenDeleteDialog(string id)
    {
        idtopass = id;
        DeleteDialogOpen = true;
        StateHasChanged();
    }
    private async Task OnDeleteDialogActionsClose()
    {
        await Task.Run(() => DeleteDialogOpenActions = false);
        StateHasChanged();
        NavigationManager.NavigateTo($"/Admin/implementation/{IdCar}", true);
    }
    private void OpenDeleteActionsDialog(string id)
    {
        idtopass = id;
        DeleteDialogOpenActions = true;
        StateHasChanged();
    }
    private async Task OnDialogContainmentClose()
    {
        await Task.Run(() => DialogOpenContainment = false);
        StateHasChanged();
        NavigationManager.NavigateTo($"/Admin/implementation/{IdCar}", true);
    }
    private void OpenContainmentDialog(string id)
    {
        idtopass = id;
        DialogOpenContainment = true;
        StateHasChanged();
    }
    private async Task OnDialogActionClose()
    {
        await Task.Run(() => DialogOpenAction = false);
        StateHasChanged();
        NavigationManager.NavigateTo($"/Admin/implementation/{IdCar}", true);
    }
    private void OpenActionDialog(string id)
    {
        idtopass = id;
        DialogOpenAction = true;
        StateHasChanged();
    }

}

