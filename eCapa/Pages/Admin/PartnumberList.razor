@page "/Admin/PartnumberList"

@attribute [Authorize(Roles="Admin, SuperAdmin")]
@inject IJSRuntime js
@inject IHttpContextAccessor HttpContextAccessor

<h1 class="ml-2">Part numbers</h1>
<div class="container-fluid">
     <div class="alert alert-@AlertType alert-dismissable text-center" role="alert" hidden="@HideAlert">
        <button type = "button" class = "close" data-dismiss="alert" @onclick="@(() => resetalert())" aria-hidden = "true">
            ×
        </button>
      @AlertMessage
    </div>
    <EditForm Model="@partnumber"  OnValidSubmit="@SaveGeneralInformation" class="">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
        <div class="form-group card">
            <div class="card-header">
                <h3 class="mb-3 ">New Part number</h3>
            </div>
            <div class="card-body">
                <div class="form-row">
                    <InputText @bind-Value="partnumber.CreatedBy" hidden class="form-control" placeholder="Created By"/>
                    <InputDate @bind-Value="partnumber.CreatedOn" hidden class="form-control" placeholder="Date Created"/>                                
                </div>
                 <div class="form-row">                             
                    <div class="form-group col-sm-12 col-md-4">
                        <InputText @bind-Value="partnumber.PartNumber" class="form-control" placeholder="Part Number"/>
                    </div>
                     <div class="form-group col-sm-12 col-md-4">
                        <InputText @bind-Value="partnumber.Description" class="form-control" placeholder="Description"/>
                    </div>  
                     <div class="form-group col-sm-12 col-md-4">
                     <InputSelect @bind-Value="@CustomerId" required class="form-control">
                            <option selected value="">Select Applicable Customer</option>
                            @if (CustomerList != null)
                            {
                                @foreach (var customer in CustomerList)
                                {
                                    <option value="@customer.CustomersId.ToString()">@customer.CustomerName</option>
                                }
                            }
                        </InputSelect>
                     </div>
                </div>               
            </div> 
            <div class="card-footer">
                <button type="submit" class="btn btn-success mr-2 btn-sm">Save</button>
                <button type="button" class="btn btn-danger btn-sm" @onclick="@(() => Clear())">Cancel</button>
            </div>
        </div>
    </EditForm>
    <h3 class="mb-3 ">Partnumber list</h3>
    <table class="table table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>Part Number</th>
                <th>Part Description</th>
                <th>Customer Name</th>
                <AuthorizeView Roles="Admin, SuperAdmin">
                    <th colspan="2">Actions</th>
                </AuthorizeView>
            </tr>
        </thead>
        <tbody>
           @if(PNumbers == null)
            {
                <tr>
                    <td colspan="4">Loading...</td>
                </tr>
            }
            else if(PNumbers.Count() == 0)
            {
                <tr>
                    <td colspan="4">No part numbers registered!</td>
                </tr>
            }
            else
            {
                @foreach (var d in PNumbers)
                {
                    <tr>
                        <td>@d.PartNumber</td>
                        <td>@d.Description</td>
                        <td>@d.Customer.CustomerName</td>
                        <AuthorizeView Roles="Admin, SuperAdmin">
                            <td>                                
                                <button class="btn btn-primary btn-sm" @onclick="@(async () => await ToEdit(d.PartNumberId))">Edit</button>
                                <button class="btn btn-danger btn-sm" @onclick="@(async () => await MarkAsDeleted(d.PartNumberId))">Delete</button>
                            </td>
                        </AuthorizeView>
                    </tr>    
                }
            }
           
        </tbody>
    </table>
</div>

@code {
    QAD_QMSContext db = new QAD_QMSContext();
    PartNumbers partnumber = new PartNumbers();
    public string loggedInUser = string.Empty;
    public IEnumerable<PartNumbers> PNumbers { get; set; }
    public IEnumerable<Customers> CustomerList { get; set; }
    public string CustomerId { get; set; }
    public bool HideAlert { get; set; } = true;
    public string AlertMessage { get; set; } = string.Empty;
    public string AlertType { get; set; } = "danger";
    private void resetalert()
    {
        AlertMessage = string.Empty;
        AlertType = "danger";
        HideAlert = true;
    }
    private void AlertShow(string type, string msg)
    {
        AlertMessage = msg;
        AlertType = type;
        HideAlert = false;
    }
    public async Task SaveGeneralInformation()
    {
        try
        {
            int id = Convert.ToInt32(CustomerId);

            partnumber.LastModifiedBy = loggedInUser;
            if(partnumber.PartNumberId == 0)
            {
                partnumber.CustomerId = id;
                db.PartNumbers.Add(partnumber);
            }
            else
            {
                partnumber.LastModifiedBy = loggedInUser;
                partnumber.LastModifiedOn = DateTime.Now;
                partnumber.CustomerId = id;
                db.PartNumbers.Update(partnumber);
            }
            await db.SaveChangesAsync();
            PNumbers = await GetPartsList();
            CustomerList = await GetCustomerList();
            partnumber = new PartNumbers();
            CustomerId = string.Empty;
            setUser();
        }
        catch(Exception ex)
        {
            ex.InnerException.ToString();
            ex.Message.ToString();
        }
    }
    protected void Clear()
    {
        partnumber = new PartNumbers();
    }
    protected override async Task OnInitializedAsync()
    {
        setUser();
        PNumbers = await GetPartsList();
        CustomerList = await GetCustomerList();
    }
    public void setUser()
    {
        partnumber.CreatedOn = DateTime.Now;
        var principal = HttpContextAccessor.HttpContext.User;
        loggedInUser = principal.FindFirstValue(ClaimTypes.NameIdentifier).ToString();
        partnumber.CreatedBy = loggedInUser;
    }
    public async Task<IEnumerable<PartNumbers>> GetPartsList()
    {
        return await db.PartNumbers.Where(x => x.IsDeleted == false).ToListAsync();
    }
    public async Task<IEnumerable<Customers>> GetCustomerList()
    {
        return await db.Customers.Where(x => x.IsDeleted == false).ToListAsync();
    }
    protected async Task MarkAsDeleted(int id)
    {
        bool confirmed = await js.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            var partnumber = await db.PartNumbers.FirstOrDefaultAsync(x => x.PartNumberId == id);
            partnumber.DeletedBy = loggedInUser;
            partnumber.DeletedOn = DateTime.Now;
            partnumber.LastModifiedBy = loggedInUser;
            partnumber.LastModifiedOn = DateTime.Now;
            partnumber.IsDeleted = true;
            db.PartNumbers.Update(partnumber);
            await db.SaveChangesAsync();
            PNumbers = await GetPartsList();
            partnumber = new PartNumbers();
            setUser();
        }

    }
    protected async Task ToEdit(int id)
    {
        partnumber = await db.PartNumbers.FirstOrDefaultAsync(x => x.PartNumberId == id);
        CustomerId = partnumber.CustomerId.ToString();
    }
}
