@page "/Admin/MapProcess/{DepartmentId}"
@attribute [Authorize]
@inject IJSRuntime js
@inject IHttpContextAccessor HttpContextAccessor

<h1 class="ml-2">Map Process to Department</h1>
<div class="container-fluid">
     <div class="alert alert-@AlertType alert-dismissable text-center" role="alert" hidden="@HideAlert">
        <button type = "button" class = "close" data-dismiss="alert" @onclick="@(() => resetalert())" aria-hidden = "true">
            ×
        </button>
      @AlertMessage
    </div>
    <EditForm Model="@deptsProcess" OnValidSubmit="@SaveGeneralInformation" class="">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group card">
            <div class="card-header">
                <h3 class="mb-3 ">Department: @dept.DepartmentName</h3>
            </div>
            <div class="card-body">
                <div class="form-row">
                    <div class="form-group col-sm-12 col-md-4">
                        <InputSelect @bind-Value="@ProcessId" required class="form-control">
                            <option selected value="">Select Aplicable Process</option>
                            @if (GetList != null)
                            {
                                @foreach (var process in GetList)
                                {
                                    <option value="@process.ProcessId.ToString()">@process.ProcessName</option>
                                }
                            }
                        </InputSelect>
                    </div>
                </div>
            </div>
            <div class="card-footer">
                <button type="submit" class="btn btn-success mr-2 btn-sm">Save</button>
                <button type="button" class="btn btn-danger btn-sm" @onclick="@(() => Clear())">Cancel</button>
            </div>
        </div>
    </EditForm>
    <h3 class="mb-3 ">Processes Assigned</h3>
    <table class="table table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>Process</th>
                <AuthorizeView Roles="Admin, SuperAdmin">
                    <th colspan="2">Actions</th>
                </AuthorizeView>
            </tr>
        </thead>
        <tbody>
            @if (GetList == null)
            {
                <tr>
                    <td colspan="2">Loading...</td>
                </tr>
            }
            else if (GetList.Count() == 0)
            {
                <tr>
                    <td colspan="2">No clauses assigned!</td>
                </tr>
            }
            else
            {

                @if (GetProcessesList == null)
                {
                    <tr>
                        <td colspan="2">Loading...</td>
                    </tr>
                }
                else if (GetProcessesList.Count() == 0)
                {
                    <tr>
                        <td colspan="2">No processes assigned!</td>
                    </tr>
                }
                else
                {
                    @foreach (var g in GetProcessesList)
                    {
                        <tr>
                            <td>@g.ProcessName</td>
                            <AuthorizeView Roles="Admin, SuperAdmin">
                                <td>
                                    <button class="btn btn-danger btn-sm" @onclick="@(async () => await ToDelete(g.ProcessId))">Delete</button>
                                </td>
                            </AuthorizeView>
                        </tr>
                    }
                }
            }
        </tbody>
    </table>
</div>

@code {
    QAD_QMSContext db = new QAD_QMSContext();
    [Parameter]
    public string DepartmentId { get; set; }
    public int DId { get; set; }
    DDepartment dept = new DDepartment();
    [Required]
    public string ProcessId { get; set; }
    DDepartmentProcesses deptsProcess = new DDepartmentProcesses();
    public string loggedInUser = string.Empty;
    public IEnumerable<DProcesses> GetList { get; set; }
    public List<DProcesses> GetProcessesList { get; set; } = null;
    public IEnumerable<DDepartmentProcesses> GetAssignedProcesses { get; set; }
    public bool HideAlert { get; set; } = true;
    public string AlertMessage { get; set; } = string.Empty;
    public string AlertType { get; set; } = "danger";
    private void resetalert()
    {
        AlertMessage = string.Empty;
        AlertType = "danger";
        HideAlert = true;
    }
    private void AlertShow(string type, string msg)
    {
        AlertMessage = msg;
        AlertType = type;
        HideAlert = false;
    }
    public async Task SaveGeneralInformation()
    {
        try
        {
            DId = Convert.ToInt32(DepartmentId);
            int pid = Convert.ToInt32(ProcessId);
            if (deptsProcess.DepartmentId == 0 && deptsProcess.ProcessId == 0)
            {
                deptsProcess.ProcessId = pid;
                deptsProcess.DepartmentId = DId;
                var exists = await db.DDepartmentProcesses.FirstOrDefaultAsync(x => x.DepartmentId == DId && x.ProcessId == pid);
                if (exists == null)
                {
                    db.DDepartmentProcesses.Add(deptsProcess);
                }
                else
                {
                    await js.InvokeAsync<Task>("alert", "Clause is already mapped to this process!");
                    ProcessId = string.Empty;
                    return;
                }

            }
            await db.SaveChangesAsync();
            GetList = await GetListM();
            GetAssignedProcesses = await GetProcessClausesM(DId);
            GetProcessesList = await GetAssignedProcesssM();
            deptsProcess = new DDepartmentProcesses();
            ProcessId = string.Empty;
        }
        catch (Exception ex)
        {
            ex.InnerException.ToString();
            ex.Message.ToString();
        }
    }
    protected void Clear()
    {
        deptsProcess = new DDepartmentProcesses();
    }
    protected override async Task OnInitializedAsync()
    {
        DId = Convert.ToInt32(DepartmentId);
        dept = await db.DDepartment
        .FirstOrDefaultAsync(x => x.DepartmentId == DId);

        GetAssignedProcesses = await GetProcessClausesM(DId);
        GetProcessesList = await GetAssignedProcesssM();
        GetList = await GetListM();
    }
    public async Task<IEnumerable<DProcesses>> GetListM()
    {
        return await db.DProcesses
        .Where(x => x.IsDeleted == false)
        .ToListAsync();
    }
    public async Task<IEnumerable<DDepartmentProcesses>> GetProcessClausesM(int pid)
    {
        return await db.DDepartmentProcesses
        .Where(x => x.DepartmentId == DId)
        .ToListAsync();
    }
    public async Task<List<DProcesses>> GetAssignedProcesssM()
    {
        List<DProcesses> cl = new List<DProcesses>();
        foreach (var process in GetAssignedProcesses)
        {
            var c = await db.DProcesses.FirstOrDefaultAsync(x => x.ProcessId == process.ProcessId);
            cl.Add(c);
        }
        return cl;
    }
    protected async Task ToDelete(int processid)
    {
        bool confirmed = await js.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            var deptsprocess = await db.DDepartmentProcesses.FirstOrDefaultAsync(x => x.DepartmentId == DId && x.ProcessId == processid);
            db.DDepartmentProcesses.Remove(deptsprocess);
            await db.SaveChangesAsync();
            GetAssignedProcesses = await GetProcessClausesM(DId);
            GetProcessesList = await GetAssignedProcesssM();
            GetList = await GetListM();
            deptsProcess = new DDepartmentProcesses();
        }
    }
}