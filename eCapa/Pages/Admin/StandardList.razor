@page "/Admin/StandardList"

@attribute [Authorize(Roles = "Admin, SuperAdmin")]
@inject IJSRuntime js
@inject IHttpContextAccessor HttpContextAccessor

<h1 class="ml-2">Standards</h1>
<div class="container-fluid">
    <div class="alert alert-@AlertType alert-dismissable text-center" role="alert" hidden="@HideAlert">
        <button type="button" class="close" data-dismiss="alert" @onclick="@(() => resetalert())" aria-hidden="true">
            ×
        </button>
        @AlertMessage
    </div>
    <EditForm Model="@standard" OnValidSubmit="@SaveGeneralInformation" class="">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group card">
            <div class="card-header">
                <h3 class="mb-3 ">New Standard</h3>
            </div>
            <div class="card-body">
                <div class="form-row">
                    <InputText @bind-Value="standard.CreatedBy" hidden class="form-control" placeholder="Created By" />
                    <InputDate @bind-Value="standard.Created" hidden class="form-control" placeholder="Date Created" />
                </div>
                <div class="form-row">
                    <div class="form-group col-sm-12 col-md-4">
                        <InputText @bind-Value="standard.Name" class="form-control" placeholder="Standard Name" />
                    </div>
                </div>
            </div>
            <div class="card-footer">
                <button type="submit" class="btn btn-success mr-2 btn-sm">Save</button>
                <button type="button" class="btn btn-danger btn-sm" @onclick="@(() => Clear())">Cancel</button>
            </div>
        </div>
    </EditForm>
    <h3 class="mb-3">Standard List</h3>
    <table class="table table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>Standard Name</th>
                <AuthorizeView Roles="Admin, SuperAdmin">
                    <th colspan="2">Actions</th>
                </AuthorizeView>
            </tr>
        </thead>
        <tbody>
            @if (GetList == null)
            {
                <tr>
                    <td colspan="2">Loading...</td>
                </tr>
            }
            else if (GetList.Count() == 0)
            {
                <tr>
                    <td colspan="2">No standards registered!</td>
                </tr>
            }
            else
            {
                @foreach (var d in GetList)
                {
                    <tr>
                        <td>@d.Name</td>
                        <AuthorizeView Roles="Admin, SuperAdmin">
                            <td>
                                <a href="/Admin/MapClause/@d.IdStandard" class="btn btn-primary btn-sm">Map Clauses</a>
                                @*<button class="btn btn-secondary btn-sm" @onclick="@(async () => OpenDeleteDialog(d.IdStandard.ToString()))">Map Team</button>*@
                                <button class="btn btn-info btn-sm" @onclick="@(async () => await ToEdit(d.IdStandard))">Edit</button>
                                <button class="btn btn-danger btn-sm" @onclick="@(async () => await MarkAsDeleted(d.IdStandard))">Delete</button>
                            </td>
                        </AuthorizeView>
                    </tr>

                }
            }

        </tbody>
    </table>
    @if (DeleteDialogOpen)
    {
        <ModalDialogTeam Title="Map Process Roles"
                         ProcessId="@idtopass"
                         OnClose="@OnDeleteDialogClose">
        </ModalDialogTeam>
    }
</div>

@code {
    public bool DeleteDialogOpen { get; set; }
    public bool hide { get; set; } = true;
    private string idtopass { get; set; }
    QAD_QMSContext db = new QAD_QMSContext();
    Dstandards standard = new Dstandards();
    private string loggedInUser = string.Empty;
    private IEnumerable<Dstandards> GetList { get; set; }
    public bool HideAlert { get; set; } = true;
    public string AlertMessage { get; set; } = string.Empty;
    public string AlertType { get; set; } = "danger";
    private void resetalert()
    {
        AlertMessage = string.Empty;
        AlertType = "danger";
        HideAlert = true;
    }
    private void AlertShow(string type, string msg)
    {
        AlertMessage = msg;
        AlertType = type;
        HideAlert = false;
    }
    public async Task SaveGeneralInformation()
    {
        try
        {
            standard.LastModifiedBy = loggedInUser;
            if (standard.IdStandard == 0)
            {
                db.Dstandards.Add(standard);
            }
            else
            {
                standard.LastModifiedBy = loggedInUser;
                standard.LastModifiedOn = DateTime.Now;
                db.Dstandards.Update(standard);
            }
            await db.SaveChangesAsync();
            GetList = await GetListM();
            standard = new Dstandards();
            setUser();
        }
        catch (Exception ex)
        {
            ex.InnerException.ToString();
            ex.Message.ToString();
        }
    }
    protected void Clear()
    {
        standard = new Dstandards();
    }
    protected override async Task OnInitializedAsync()
    {
        setUser();
        GetList = await GetListM();
    }
    protected void setUser()
    {
        standard.Created = DateTime.Now;
        var principal = HttpContextAccessor.HttpContext.User;
        loggedInUser = principal.FindFirstValue(ClaimTypes.NameIdentifier).ToString();
        standard.CreatedBy = loggedInUser;
    }
    protected async Task<IEnumerable<Dstandards>> GetListM()
    {
        return await db.Dstandards.Where(x => x.IsDeleted == false).ToListAsync();
    }
    protected async Task MarkAsDeleted(int id)
    {
        bool confirmed = await js.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            var standard = await db.Dstandards.FirstOrDefaultAsync(x => x.IdStandard == id);
            standard.DeletedBy = loggedInUser;
            standard.DeletedOn = DateTime.Now;
            standard.LastModifiedBy = loggedInUser;
            standard.LastModifiedOn = DateTime.Now;
            standard.IsDeleted = true;
            db.Dstandards.Update(standard);
            await db.SaveChangesAsync();
            GetList = await GetListM();
            standard = new Dstandards();
            setUser();
        }
    }
    protected async Task ToEdit(int id)
    {
        standard = await db.Dstandards.FirstOrDefaultAsync(x => x.IdStandard == id);
    }
    private async Task OnDeleteDialogClose()
    {
        await Task.Run(() => DeleteDialogOpen = false);
        StateHasChanged();
    }
    private void OpenDeleteDialog(string id)
    {
        idtopass = id;
        DeleteDialogOpen = true;
        StateHasChanged();
    }
}