@using System.Security.Claims;
@using Microsoft.AspNetCore.Http
@using eCapa.Services
@using BlazorInputFile


@attribute [Authorize]
@inject IJSRuntime js
@inject IHttpContextAccessor HttpContextAccessor

@inject NavigationManager NavigationManager

<div class="container">
    <div class="modal fade show" id="myModal" style="display:block;background-color: rgba(10,10,10,.8);"
         aria-modal="true" role="dialog">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">@Title</h4>
                    <button type="button" class="close" @onclick="@ModalCancel">&times;</button>
                </div>
                <EditForm Model="@d7" class="">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="alert alert-primary" role="alert">
                        Review the task for proper implementation.
                    </div>
                    <div class="form-group card">
                        <div class="card-header">
                            <h3 class="mb-3 ">Action Information:</h3>
                        </div>
                        <div class="card-body" style="overflow-y: auto; max-height: 400px; ">
                            <div class="form-row">
                                @if (d7.IdSeven != 0)
                                {
                                    <div class="table-responsive">
                                        <table class="table table-bordered table-striped table-sm small">
                                            <thead class="thead-light">
                                                <tr>
                                                    <th>Task Owner</th>
                                                    <th>Task Due Date</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <tr>
                                                    <td>@d7.OwnerNavigation.NormalizedUserName</td>
                                                    <td>@d7.DueDate.ToShortDateString()</td>
                                                </tr>
                                                <tr><td colspan="2"><strong>Task Detail: </strong>@d7.Action</td></tr>
                                                <tr><td colspan="2"><strong>Implementation Comment: </strong>@d7.Comment</td></tr>
                                            </tbody>
                                        </table>
                                    </div>
                                    @if (d7 != null && d7.GeneralInformartion.Verifier == loggedInUser)
                                    {
                                        <div class="form-group col-sm-12 col-md-12">
                                            <label>Comment:</label>
                                            <InputTextArea @bind-Value="@d7.EffectivenessVerificationCommentOne" rows="4" class="form-control" placeholder="Information on the work done for the task." />
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="form-group col-sm-12 col-md-12">
                                            <label>Comment:</label>
                                            <InputTextArea @bind-Value="@d7.EffectivenessVerificationCommentOne" readonly="true" rows="4" class="form-control" placeholder="Information on the reason for approval/rejection of the task." />
                                        </div>
                                    }
                                    <div class="card">
                                        <h5 class="card-header">Evidence</h5>
                                        <div class="card-body" style="overflow-y: auto; max-height: 400px; ">
                                            @if (!String.IsNullOrEmpty(d7.Evidence))
                                            {
                                                <img class="img img-responsive" src="/Upload/@d7.GeneralInformartion.CapaNumber/@d7.Type.ToString().ToUpper()/@d7.IdSeven.ToString()/@d7.Evidence" />
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="card-footer">
                            <button hidden="@hideFileUploadButton" @onclick="(async ()=> await ApproveAction())" type="button" class="btn btn-success bn-sm float-left">Approve Implementation</button>
                            <button hidden="@hideFileUploadButton" type="button" class="btn btn-danger bn-sm float-left ml-2">Reject Implementation</button>
                            <button type="button" class="btn btn-secondary ml-2" @onclick="@ModalCancel">Cancel</button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>
@code {
    IFileListEntry file;
    public bool PictureDialogOpen { get; set; }
    protected string FilePaths { get; set; }
    private readonly IWebHostEnvironment _environment;
    QAD_QMSContext db = new QAD_QMSContext();
    Dseven d7 { get; set; } = new Dseven();
    [Parameter]
    public string Title { get; set; }
    [Parameter]
    public string Text { get; set; }
    [Parameter]
    public EventCallback<bool> OnClose { get; set; }
    [Parameter]
    public string IdAction { get; set; }
    public bool hideFileUploadButton { get; set; } = false;
    public int IdActionNumber { get; set; }
    public string CarIdNumber { get; set; }
    public string loggedInUser { get; set; }
    public IEnumerable<AspNetUsers> GetResponsibles { get; set; }
    public bool hide { get; set; } = true;
    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(IdAction))
        {
            IdActionNumber = 0;
        }
        else
        {
            IdActionNumber = Convert.ToInt32(IdAction);
        }
        if (IdActionNumber != 0)
        {
            await GetInitialData();

            if (d7 != null)
            {
                CarIdNumber = d7.GeneralInformartionId.ToString();
                hide = false;
            }
        }
        GetLoggedInUser();
    }
    protected async Task GetInitialData()
    {
        d7 = await Action();
    }
    protected void navigate()
    {
        NavigationManager.NavigateTo($"/implementation");
    }
    public async Task<Dseven> Action()
    {
        d7 = await db.Dseven.Include(x => x.OwnerNavigation).Include(x => x.GeneralInformartion).FirstOrDefaultAsync(x => x.IdSeven == IdActionNumber);
        return d7;
    }
    private void GetLoggedInUser()
    {
        var principal = HttpContextAccessor.HttpContext.User;
        loggedInUser = principal.FindFirstValue(ClaimTypes.NameIdentifier).ToString();
    }
    private Task ModalOk()
    {
        return OnClose.InvokeAsync(true);
    }
    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }
    protected async Task ApproveAction()
    {
        if (string.IsNullOrEmpty(d7.Status))
        {
            await js.InvokeAsync<Task>("alert", "Comment is required!");
            return;
        }
        d7.Status = "Closed";
        d7.LastModifiedBy = loggedInUser;
        d7.LastModifiedOn = DateTime.Now;
        d7.EffectivenessVerificationStatusOne = "Closed";
        d7.EffectivenessVerifiedOnOne = DateTime.Now;
        d7.EffectivenessVerifiedByOne = loggedInUser;
        db.Update(d7);
        await db.SaveChangesAsync();
        d7 = await Action();
        await js.InvokeAsync<Task>("alert", "Action verified correctly!");
        await ModalOk();

    }
}
