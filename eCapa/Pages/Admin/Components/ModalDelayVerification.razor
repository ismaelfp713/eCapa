@attribute [Authorize(Roles = "Admin, SuperAdmin")]
@inject IJSRuntime js
@inject IHttpContextAccessor HttpContextAccessor
<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);"
     aria-modal="true" role="dialog">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@Title</h4>
                <button type="button" class="close" @onclick="@ModalCancel">&times;</button>
            </div>
            <EditForm Model="@action" class="">
                <DataAnnotationsValidator />
                <ValidationSummary />
                @if (action != null)
                {
                    <div class="modal-body">
                        <div class="alert alert-warning" role="alert">
                            Provide a new Due Date for the task to be completed. Due date can only be modified 3 times.
                        </div>

                        <p>@Text</p>
                        @if (loggedInUser == action.Owner)
                        {
                            <div class="form-group col-md-12">
                                <label><strong>Due Date:</strong></label>
                                <InputDate @bind-Value="action.EffectivenessVerificationDateOne" rows="4" class="form-control" />
                            </div>
                            <div class="form-group col-sm-12 col-md-12">
                                <label><strong>Delay Reason:</strong></label>
                                <InputTextArea @bind-Value="action.EffectivenessVerificationDelayReasonOne" class="form-control" required placeholder="Reason for requesting a delay" />
                                <button type="button" class="btn btn-success mt-2" @onclick="@(async ()=> await DelayContainment())">Delay</button>
                                <button type="button" class="btn btn-secondary mt-2" @onclick="(async ()=> await ModalCancel())">Cancel</button>
                            </div>
                        }
                    </div>
                    <div class="modal-footer text-center alert-@Alert">
                        @Message
                    </div>
                }
            </EditForm>
        </div>
    </div>
</div>

@code {
    QAD_QMSContext db = new QAD_QMSContext();
    DProcessRoles processRoles = new DProcessRoles();
    DfiveActions action { get; set; } = new DfiveActions();
    [Parameter]
    public string Title { get; set; }
    [Parameter]
    public string Text { get; set; }

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }
    [Parameter]
    public string IdAction { get; set; }
    public int Id { get; set; }
    public string Message { get; set; }
    public string loggedInUser { get; set; }
    public string QaManager { get; set; } = string.Empty;
    public string DeptManager { get; set; } = string.Empty;
    public string Alert { get; set; } = "default";
    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }
    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(IdAction))
        {
            Id = Convert.ToInt32(IdAction);
            await Task.WhenAll(Task.Run(() => GetInitialData()));
        }
        else
        {
            Id = 0;
        }
    }
    protected async Task GetInitialData()
    {
        action = await GetAction(Id);
        var principal = HttpContextAccessor.HttpContext.User;
        loggedInUser = principal.FindFirstValue(ClaimTypes.NameIdentifier).ToString();
    }
    private Task ModalOk()
    {
        return OnClose.InvokeAsync(true);
    }
    public async Task DelayContainment()
    {
        try
        {
            if (Id == 0)
            {
                await js.InvokeAsync<Task>("alert", "Cannot delay this action!");
                Message = "Cannot delay this action!";
                Alert = "danger";
                return;
            }
            else
            {
                var exists = await db.DfiveActions.FirstOrDefaultAsync(x => x.IdFive == Id && x.IsDeleted == false);
                if (exists != null)
                {
                    if (string.IsNullOrEmpty(exists.EffectivenessVerificationDelayReasonOne))
                    {
                        await js.InvokeAsync<Task>("alert", "Delay reason is required!");
                        return;
                    }
                    if(DateTime.Now > exists.EffectivenessVerificationDateOne)
                    {
                        await js.InvokeAsync<Task>("alert", "Delay date cannot be before the original date!");
                        return;
                    }
                    if (exists.EffectivenessVerificationDelayRequestedOne != false)
                    {
                        await js.InvokeAsync<Task>("alert", "Cannot delay this action, it has already been delayed!");                       
                        return;
                    }
                    else
                    {
                        exists.EffectivenessVerificationDelayRequestedOne = true;
                        exists.EffectivenessVerificationDelayRequestedOnOne = DateTime.Now;
                        exists.LastModifiedBy = loggedInUser;
                        exists.LastModifiedOn = DateTime.Now;                        
                        db.Update(exists);
                    }

                }
            }
            await db.SaveChangesAsync();
            Message = $"Containment Action Delayed!";
            Alert = "success";
            await ModalOk();
        }
        catch (Exception ex)
        {
            ex.InnerException.ToString();
            ex.Message.ToString();
        }
    }
    protected async Task<DfiveActions> GetAction(int id)
    {
        var action = await db.DfiveActions
            .Include(x => x.IdActionPlanNavigation)
            .ThenInclude(x => x.GeneralInformartion)
            .FirstOrDefaultAsync(x => x.IsDeleted == false && x.IdFive == id);
        return action;
    }
}