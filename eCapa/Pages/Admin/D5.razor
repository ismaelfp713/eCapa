@page "/Admin/d5/{IdCar}"
@using System.Security.Claims;
@using Microsoft.AspNetCore.Http
@using eCapa.Services
@using BlazorInputFile

@attribute [Authorize]
@inject IJSRuntime js
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager
@inject IFileUpload fileUpload

<div class="container-fluid">
    <div class="alert alert-@AlertType alert-dismissable text-center" role="alert" hidden="@HideAlert">
        <button type="button" class="close" data-dismiss="alert" @onclick="@(() => resetalert())" aria-hidden="true">
            ×
        </button>
        @AlertMessage
    </div>
    <EditForm Model="@d5Actions" OnValidSubmit="@SaveGeneralInformation" class="">
        <div class="card">
            <div class="card-header">
                <h3 class="mb-3">D5 – Permanent Corrective Actions</h3>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-sm-12 col-md-12 col-lg-12">
                        <DataAnnotationsValidator />
                        <ValidationSummary />                       
                                <InputText @bind-Value="IdCar" hidden readonly="true" class="form-control" placeholder="CAR Number" />
                               
                            </div>
                    <div class="card-body">
                        <div class="alert alert-danger" role="alert">
                            Warning: Any changes made to the action plan will require re-approval by the QA and Functional Manager.
                        </div>
                        <div class="form-row">
                            <p class="mb-2 ml-2"><b>Problem Description:</b> @problem.ProblemStatement</p>
                        </div>
                        <div class="form-row">
                            <div class="form-group col-12 col-sm-12 col-md-4">
                                <label>Task Type:</label>
                                <InputSelect @bind-Value="@d5Actions.Type" class="form-control">
                                    <option selected disabled value="">Select Type</option>
                                    @foreach (var type in Enum.GetValues(typeof(types)))
                                    {
                                        <option value="@type">@type</option>
                                    }
                                </InputSelect>
                            </div>
                            <InputText @bind-Value="d5Actions.CreatedBy" hidden class="form-control" placeholder="Created By" />
                            <InputDate @bind-Value="d5Actions.Created" hidden class="form-control" placeholder="Date Created" />
                            <div class="form-group col-12 col-sm-12 col-md-4">
                                <label>Task Owner:</label>
                                <InputSelect @bind-Value="@d5Actions.Owner" class="form-control">
                                    <option selected disabled value="">Select Owner</option>
                                    @if (GetResponsibles != null)
                                    {
                                        foreach (var owner in GetResponsibles)
                                        {
                                            <option value="@owner.Id">@owner.NormalizedUserName</option>
                                        }
                                    }
                                    else
                                    {
                                        <option value="">No Records Found</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="form-group col-12 col-sm-12 col-md-4">
                                <label>Task Due Date:</label>
                                <InputDate @bind-Value="@d5Actions.DueDate" class="form-control" />
                            </div>
                            <div class="form-group col-sm-12 col-md-12">
                                <label>Task Detail:</label>
                                <InputTextArea @bind-Value="@d5Actions.Action" rows="4" class="form-control" required="true" placeholder="Task details" />
                            </div>
                            <div class="col-md-12">
                                <div class="row">
                                    <div class="form-group col-12 col-sm-12 col-md-4">
                                        @if (GetORootCauses != null)
                                        {
                                            <div class="card">
                                                <div class="card-header">
                                                    Ocurrence RC Result
                                                </div>

                                                <ul class="list-group list-group-flush">
                                                    @foreach (var item in GetORootCauses)
                                                    {
                                                        <li class="list-group-item">@item.Why</li>
                                                    }
                                                </ul>
                                            </div>
                                        }
                                    </div>
                                    <div class="form-group col-12 col-sm-12 col-md-4">
                                        @if (GetERootCauses != null)
                                        {
                                            <div class="card">
                                                <div class="card-header">
                                                    Escape RC Result
                                                </div>

                                                <ul class="list-group list-group-flush">
                                                    @foreach (var item in GetERootCauses)
                                                    {
                                                        <li class="list-group-item">@item.Why</li>
                                                    }
                                                </ul>
                                            </div>
                                        }
                                    </div>
                                    <div class="form-group col-12 col-sm-12 col-md-4">
                                        @if (GetSRootCauses != null)
                                        {
                                            <div class="card">
                                                <div class="card-header">
                                                    Systemic RC Result
                                                </div>

                                                <ul class="list-group list-group-flush">
                                                    @foreach (var item in GetSRootCauses)
                                                    {
                                                        <li class="list-group-item">@item.Why</li>
                                                    }
                                                </ul>
                                            </div>
                                        }
                                    </div>
                                </div>
                                <div class="row mt-3">
                                    <div class="col-12 col-sm-12 col-md-4">
                                        @if (OActions != null)
                                        {
                                            @if (OActions.Count() > 0)
                                            {
                                                <div class="table-responsive">
                                                    <table class="table table-bordered table-striped table-sm small">
                                                        <thead class="thead-light">
                                                            <tr>
                                                                <th hidden>Task Id</th>
                                                                <th>Action</th>
                                                                <th>Task Owner</th>
                                                                <th>Task Due Date</th>
                                                                <th>Status</th>
                                                                <th>Action</th>
                                                            </tr>
                                                        </thead>
                                                        <tbody>

                                                            @foreach (var w in OActions)
                                                            {
                                                                <tr>
                                                                    <td hidden>@w.IdFive</td>
                                                                    <td>@w.Action</td>
                                                                    <td>@w.OwnerNavigation.NormalizedUserName.Substring(0, @w.OwnerNavigation.NormalizedUserName.LastIndexOf("@"))</td>
                                                                    <td>@w.DueDate.ToShortDateString()</td>
                                                                    <td>@w.Status</td>
                                                                    @if (w.Status == "Closed" || w.Status == "Approved" || w.Status == "Pending Verification")
                                                                    {
                                                                        <td class="text-center"><span disabled class="oi oi-lock-locked border-info text-danger icon" aria-hidden="true"></span></td>
                                                                    }
                                                                    else
                                                                    {
                                                                        <td class="text-center"><span @onclick="@(async () => await MarkAsDeleted(w.IdFive))" class="oi oi-trash border-info text-danger icon" aria-hidden="true"></span></td>
                                                                    }
                                                                </tr>
                                                            }
                                                        </tbody>
                                                    </table>
                                                </div>
                                            }
                                        }
                                    </div>
                                    <div class="col-12 col-sm-12 col-md-4">
                                        @if (EActions != null)
                                        {
                                            @if (EActions.Count() > 0)
                                            {
                                                <div class="table-responsive">
                                                    <table class="table table-bordered table-striped table-sm small">
                                                        <thead class="thead-light">
                                                            <tr>
                                                                <th hidden>Task Id</th>
                                                                <th>Action</th>
                                                                <th>Task Owner</th>
                                                                <th>Task Due Date</th>
                                                                <th>Status</th>
                                                                <th>Action</th>
                                                            </tr>
                                                        </thead>
                                                        <tbody>

                                                            @foreach (var w in EActions)
                                                            {
                                                                <tr>
                                                                    <td hidden>@w.IdFive</td>
                                                                    <td>@w.Action</td>
                                                                    <td>@w.OwnerNavigation.NormalizedUserName.Substring(0, @w.OwnerNavigation.NormalizedUserName.LastIndexOf("@"))</td>
                                                                    <td>@w.DueDate.ToShortDateString()</td>
                                                                    <td>@w.Status</td>
                                                                    @if (w.Status == "Closed" || w.Status == "Approved" || w.Status == "Pending Verification")
                                                                    {
                                                                        <td class="text-center"><span disabled class="oi oi-lock-locked border-info text-danger icon" aria-hidden="true"></span></td>

                                                                    }
                                                                    else
                                                                    {
                                                                        <td class="text-center"><span @onclick="@(async () => await MarkAsDeleted(w.IdFive))" class="oi oi-trash border-info text-danger icon" aria-hidden="true"></span></td>
                                                                    }

                                                                </tr>
                                                            }
                                                        </tbody>
                                                    </table>
                                                </div>
                                            }
                                        }

                                    </div>
                                    <div class="col-12 col-sm-12 col-md-4">
                                        @if (SActions != null)
                                        {
                                            @if (SActions.Count() > 0)
                                            {
                                                <div class="table-responsive">
                                                    <table class="table table-bordered table-striped table-sm small">
                                                        <thead class="thead-light">
                                                            <tr>
                                                                <th hidden>Task Id</th>
                                                                <th>Action</th>
                                                                <th>Task Owner</th>
                                                                <th>Task Due Date</th>
                                                                <th>Status</th>
                                                                <th>Action</th>
                                                            </tr>
                                                        </thead>
                                                        <tbody>

                                                            @foreach (var w in SActions)
                                                            {
                                                                <tr>
                                                                    <td hidden>@(w.IdFive)</td>
                                                                    <td>@w.Action</td>
                                                                    <td>@w.OwnerNavigation.NormalizedUserName.Substring(0, @w.OwnerNavigation.NormalizedUserName.LastIndexOf("@"))</td>
                                                                    <td>@w.DueDate.ToShortDateString()</td>
                                                                    <td>@w.Status</td>
                                                                    @if (General.Status == "Closed" || General.Status == "Approved" || w.Status == "Pending Verification")
                                                                    {
                                                                        <td class="text-center"><span disabled class="oi oi-lock-locked border-info text-danger icon" aria-hidden="true"></span></td>

                                                                    }
                                                                    else
                                                                    {
                                                                        <td class="text-center"><span @onclick="@(async () => await MarkAsDeleted(w.IdFive))" class="oi oi-trash border-info text-danger icon" aria-hidden="true"></span></td>
                                                                    }

                                                                </tr>
                                                            }
                                                        </tbody>
                                                    </table>
                                                </div>
                                            }
                                        }
                                    </div>
                                </div>
                            </div>

                        </div>

                    </div>
                </div>

            </div>
            <div class="card-footer">
               
                    @if (General.Status == "Approved" ||General.Status == "Closed")
                    {
                        <button type="button" disabled class="btn btn-success bn-sm float-right">Save</button>
                    }               
                    else
                    {
                        <button type="submit" class="btn btn-success bn-sm float-right">Save</button>
                    }
                <button type="button" class="btn btn-info  bn-sm float-left" @onclick="@(() => navigate())">Back to Main</button>
            </div>
        </div>
    </EditForm>
</div>
@code {
    IFileListEntry file;
    private readonly IWebHostEnvironment _environment;
    QAD_QMSContext db = new QAD_QMSContext();
    Dfour d4 = new Dfour();
    Dfive d5 = new Dfive();
    DfiveActions d5Actions = new DfiveActions();
    GeneralInformation General = new GeneralInformation();
    [Parameter]
    public string IdCar { get; set; }
    public int CarIdNumber { get; set; }
    public string loggedInUser { get; set; }
    public IEnumerable<AspNetUsers> GetResponsibles { get; set; }
    public IEnumerable<Dfive> ActionPlanInfo { get; set; }
    public IEnumerable<DfiveActions> OActions { get; set; }
    public IEnumerable<DfiveActions> EActions { get; set; }
    public IEnumerable<DfiveActions> SActions { get; set; }
    public IEnumerable<Dfour> GetORootCauses { get; set; }
    public IEnumerable<Dfour> GetERootCauses { get; set; }
    public IEnumerable<Dfour> GetSRootCauses { get; set; }
    public List<string> rootcauses { get; set; }
    public bool hide { get; set; } = true;
    public bool hidediv { get; set; } = false;
    public bool required { get; set; } = true;
    Dtwo problem = new Dtwo();
    public bool HideAlert { get; set; } = true;
    public string AlertMessage { get; set; } = string.Empty;
    public DateTime dueDate { get; set; }
    public string AlertType { get; set; } = "danger";
    private void resetalert()
    {
        AlertMessage = string.Empty;
        AlertType = "danger";
        HideAlert = true;
    }
    private void AlertShow(string type, string msg)
    {
        AlertMessage = msg;
        AlertType = type;
        HideAlert = false;
    }
    public async Task SaveGeneralInformation()
    {

        d5 = await db.Dfive.Include(x => x.GeneralInformartion).FirstOrDefaultAsync(x => x.GeneralInformartionId == CarIdNumber && x.IsDeleted == false);
        if (d5 == null)
        {
            d5 = new Dfive();
        }
        d5.GeneralInformartionId = CarIdNumber;
        d5.QaApprovalStatus = "Pending Action Plan Approval";
        d5.FunctionalApprovalStatus = "Pending Action Plan Approval";
        d5.Created = DateTime.Now;
        d5.CreatedBy = loggedInUser;
        d5.IsDeleted = false;
        d5.LastModifiedBy = loggedInUser;
        d5.LastModifiedOn = DateTime.Now;

        if (d5.IdActionPlan == 0)
        {
            db.Dfive.Add(d5);
        }
        else
        {

            d5.GeneralInformartion.Status = "Pending Action Plan Approval";
            db.Dfive.Update(d5);
        }
        await db.SaveChangesAsync();

        d5Actions.GeneralInformartionId = CarIdNumber;
        d5Actions.IdActionPlan = d5.IdActionPlan;
        d5Actions.DelayRequested = false;
        d5Actions.DelayCount = 0;
        d5Actions.Created = DateTime.Now;
        d5Actions.IsDeleted = false;
        d5Actions.LastModifiedBy = loggedInUser;
        d5Actions.LastModifiedOn = DateTime.Now;
        d5Actions.EffectivenessVerificationDateOne = d5Actions.DueDate.AddDays(5);
        d5Actions.EffectivenessVerificationDateTwo = d5Actions.EffectivenessVerificationDateOne?.AddDays(30);
        d5Actions.EffectivenessVerificationDateThree = d5Actions.EffectivenessVerificationDateTwo?.AddDays(30);
        var actions = await db.DfiveActions.Where(x => x.GeneralInformartionId == CarIdNumber && x.IsDeleted == false).ToListAsync();
        var containment = await db.Dthree.Where(x => x.GeneralInformartionId == CarIdNumber && x.IsDeleted == false).ToListAsync();
        if (d5Actions.IdFive == 0)
        {

            if (d5Actions.DueDate < DateTime.Today)
            {
                dueDate = d5Actions.DueDate;
                AlertShow("danger", "Due Date Cannot be in the past!");
                return;
            }
            db.DfiveActions.Add(d5Actions);
            foreach (var action in actions)
            {
                action.MarkedAsCompleted = null;
                action.Comment = null;
                action.Evidence = null;
                action.LastModifiedBy = loggedInUser;
                action.LastModifiedOn = DateTime.Now;
                action.Status = "Pending Action Plan Approval";
                action.EffectivenessVerifiedByOne = null;
                action.EffectivenessVerificationStatusOne = null;
                action.EffectivenessVerificationCommentOne = null;
                action.EffectivenessVerifiedOnOne = null;

                action.EffectivenessVerifiedByTwo = null;
                action.EffectivenessVerificationStatusTwo = null;
                action.EffectivenessVerificationCommentTwo = null;
                action.EffectivenessVerifiedOnTwo = null;

                action.EffectivenessVerifiedByTwo = null;
                action.EffectivenessVerificationStatusTwo = null;
                action.EffectivenessVerificationCommentTwo = null;
                action.EffectivenessVerifiedOnTwo = null;
                db.Update(action);
            }
        }
        else
        {
            foreach (var action in actions)
            {
                action.MarkedAsCompleted = null;
                action.Comment = null;
                action.Evidence = null;
                action.LastModifiedBy = loggedInUser;
                action.LastModifiedOn = DateTime.Now;
                action.Status = "Pending Action Plan Approval";
                action.EffectivenessVerifiedByOne = null;
                action.EffectivenessVerificationStatusOne = null;
                action.EffectivenessVerificationCommentOne = null;
                action.EffectivenessVerifiedOnOne = null;

                action.EffectivenessVerifiedByTwo = null;
                action.EffectivenessVerificationStatusTwo = null;
                action.EffectivenessVerificationCommentTwo = null;
                action.EffectivenessVerifiedOnTwo = null;

                action.EffectivenessVerifiedByTwo = null;
                action.EffectivenessVerificationStatusTwo = null;
                action.EffectivenessVerificationCommentTwo = null;
                action.EffectivenessVerifiedOnTwo = null;
                db.Update(action);
            }
        }
        try
        {
            await db.SaveChangesAsync();
            await Task.WhenAll(Task.Run(() => GetInitialData()));
            AlertShow("success", $"D5 saved correctly.");
            await js.InvokeAsync<Task>("alert", $"D5 saved correctly.");
            d5 = new Dfive();
            d5Actions = new DfiveActions();
            d5.CreatedBy = loggedInUser;
            d5Actions.CreatedBy = loggedInUser;
            d5Actions.Status = "Pending Action Plan Approval";

            d5Actions.DueDate = DateTime.Now;
            hide = false;
        }
        catch (Exception ex)
        {
            ex.InnerException.ToString();
            ex.Message.ToString();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        CarIdNumber = Convert.ToInt32(IdCar);
        IdCar = $"CAPA{IdCar}";
        var principal = HttpContextAccessor.HttpContext.User;
        loggedInUser = principal.FindFirstValue(ClaimTypes.NameIdentifier).ToString();
        d5Actions.DueDate = DateTime.Now;
        d5Actions.CreatedBy = loggedInUser;
        d5Actions.Status = "Pending Action Plan Approval";
        await Task.WhenAll(Task.Run(() => GetInitialData()));
        if (OActions.Count() > 0 || OActions.Count() > 0 || SActions.Count() > 0)
        {
            hide = false;
        }
    }
    protected async Task GetInitialData()
    {
        GetResponsibles = await Responsibles();
        OActions = await GetOActions();
        EActions = await GetEActions();
        SActions = await GetSActions();
        GetORootCauses = await ORcs();
        GetERootCauses = await ERcs();
        GetSRootCauses = await SRcs();
        problem = await GetProblemDescription();
        General = await GetGeneralInformation();
    }
    protected void navigate()
    {
        NavigationManager.NavigateTo($"/Admin/general/{CarIdNumber.ToString()}");
    }
    public async Task<List<AspNetUsers>> Responsibles()
    {
        return await db.AspNetUsers.ToListAsync();
    }
    public async Task<List<DfiveActions>> GetOActions()
    {
        return await db.DfiveActions.Include(x => x.IdActionPlanNavigation.GeneralInformartion).Where(x => x.GeneralInformartionId == CarIdNumber && x.IsDeleted == false && x.Type == "Ocurrence").ToListAsync();
    }
    public async Task<List<DfiveActions>> GetEActions()
    {
        return await db.DfiveActions.Include(x => x.IdActionPlanNavigation.GeneralInformartion).Where(x => x.GeneralInformartionId == CarIdNumber && x.IsDeleted == false && x.Type == "Escape").ToListAsync();
    }
    public async Task<List<DfiveActions>> GetSActions()
    {
        return await db.DfiveActions.Include(x => x.IdActionPlanNavigation.GeneralInformartion).Where(x => x.GeneralInformartionId == CarIdNumber && x.IsDeleted == false && x.Type == "Systemic").ToListAsync();
    }
    public async Task<List<Dfour>> ORcs()
    {
        return await db.Dfour.Include(x => x.GeneralInformartion).Where(x => x.GeneralInformartionId == CarIdNumber && x.IsDeleted == false && x.IsRootCause == true && x.Type == "Ocurrence").ToListAsync();
    }
    public async Task<List<Dfour>> ERcs()
    {
        return await db.Dfour.Include(x => x.GeneralInformartion).Where(x => x.GeneralInformartionId == CarIdNumber && x.IsDeleted == false && x.IsRootCause == true && x.Type == "Escape").ToListAsync();
    }
    public async Task<List<Dfour>> SRcs()
    {
        return await db.Dfour.Include(x => x.GeneralInformartion).Where(x => x.GeneralInformartionId == CarIdNumber && x.IsDeleted == false && x.IsRootCause == true && x.Type == "Systemic").ToListAsync();
    }
    protected async Task MarkAsDeleted(int id)
    {
        bool confirmed = await js.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            var act = await db.DfiveActions.FirstOrDefaultAsync(x => x.IdFive == id);
            act.IsDeleted = true;
            act.DeletedBy = loggedInUser;
            act.DeletedOn = DateTime.Now;
            db.DfiveActions.Update(act);
            var actions = await db.DfiveActions.Where(x => x.GeneralInformartionId == CarIdNumber && x.IsDeleted == false).ToListAsync();
            foreach (var action in actions)
            {
                action.MarkedAsCompleted = null;
                action.Comment = null;
                action.Evidence = null;
                action.LastModifiedBy = loggedInUser;
                action.LastModifiedOn = DateTime.Now;
                action.Status = "Pending Action Plan Approval";
                action.EffectivenessVerifiedByOne = null;
                action.EffectivenessVerificationStatusOne = null;
                action.EffectivenessVerificationCommentOne = null;
                action.EffectivenessVerifiedOnOne = null;

                action.EffectivenessVerifiedByTwo = null;
                action.EffectivenessVerificationStatusTwo = null;
                action.EffectivenessVerificationCommentTwo = null;
                action.EffectivenessVerifiedOnTwo = null;

                action.EffectivenessVerifiedByTwo = null;
                action.EffectivenessVerificationStatusTwo = null;
                action.EffectivenessVerificationCommentTwo = null;
                action.EffectivenessVerifiedOnTwo = null;
                db.Update(action);
            }

            var deleted = await db.SaveChangesAsync();
            if (deleted > 0)
            {

                AlertShow("success", "Deleted succesfully!");
            }
            await GetInitialData();
        }
    }
    protected async Task MarkAsRootCause(int id)
    {
        var why = await db.Dfour.FirstOrDefaultAsync(x => x.IsDeleted == false && x.IdFour == id);
        why.IsRootCause = !why.IsRootCause;
        db.Update(why);
        await db.SaveChangesAsync();
        await Task.WhenAll(Task.Run(() => GetRcs()));
    }
    protected async Task GetRcs()
    {
        GetORootCauses = await ORcs();
        GetERootCauses = await ERcs();
        GetSRootCauses = await SRcs();
    }
    protected void CheckChanged()
    {
        hidediv = !hidediv;
        required = !required;
    }
    protected async Task<Dtwo> GetProblemDescription()
    {
        return await db.Dtwo.Include(x => x.GeneralInformartion).FirstOrDefaultAsync(x => x.IsDeleted == false && x.GeneralInformartionId == CarIdNumber);
    }
    protected async Task<GeneralInformation> GetGeneralInformation()
    {
        var res = await db.GeneralInformation.FirstOrDefaultAsync(x => x.GeneralInformartionId == CarIdNumber);
        return res;
    }
}
