@page "/Admin/UsersList"
@attribute [Authorize(Roles="Admin, SuperAdmin")]
@inject IJSRuntime js
@inject IHttpContextAccessor HttpContextAccessor

<h1 class="ml-2">Users</h1>
<div class="container-fluid">
    <div class="alert alert-@AlertType alert-dismissable text-center" role="alert" hidden="@HideAlert">
        <button type = "button" class = "close" data-dismiss="alert" @onclick="@(() => resetalert())" aria-hidden = "true">
            ×
        </button>
      @AlertMessage
    </div>
    <EditForm Model="@users" hidden="@hide" OnValidSubmit="@SaveGeneralInformation" class="">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
        <div class="form-group card">
            <div class="card-header">
                <h3 class="mb-3 ">Edit User</h3>
            </div>
            <div class="card-body">
                <div class="form-row">
                    <InputText @bind-Value="users.Id" hidden class="form-control" placeholder="user id"/>                                                   
                </div>
                 <div class="form-row">  
                     <div class="form-group col-sm-12 col-md-4">
                        <InputText @bind-Value="users.UserName" required class="form-control" placeholder="User Name"/>
                    </div>                                        
                </div>               
            </div> 
            <div class="card-footer">
                <button type="submit" class="btn btn-success mr-2 btn-sm">Save</button>
                <button type="button" class="btn btn-danger btn-sm" @onclick="@(() => Clear())">Cancel</button>
            </div>
        </div>
    </EditForm>
    <h3 class="mb-3" hidden="@hide">User List</h3>
    <table class="table table-striped table-bordered">
        <thead class="thead-dark">
            <tr>                
                <th>User Name</th>                
                  <AuthorizeView Roles="Admin, SuperAdmin">
                    <th colspan="3">Actions</th>
                </AuthorizeView>
            </tr>
        </thead>
        <tbody>
           @if(GetList == null)
            {
                <tr>
                    <td colspan="3">Loading...</td>
                </tr>
            }
            else if(GetList.Count() == 0)
            {
                <tr>
                    <td colspan="3">No clauses registered!</td>
                </tr>
            }
            else
            {
                @foreach (var d in GetList)
                {
                    <tr>                       
                        <td>@d.UserName</td>                              
                        <AuthorizeView Roles="Admin">
                            <td class="text-center">                          
                                <span class="oi oi-cog icon text-primary" @onclick="@(async () => OpenDeleteDialog(d.Id))"></span>
                                <span class="oi oi-pencil text-info icon ml-2 mr-2" @onclick="@(async () => await ToEdit(d.Id))"></span>
                                <span class="oi oi-trash text-danger icon" @onclick="@(async () => await MarkAsDeleted(d.Id))"></span>                          
                            </td>
                         </AuthorizeView> 
                    </tr>    
                }
            }
           
        </tbody>
    </table>
   @if (DeleteDialogOpen)
{
    <ModalDialogRoles Title="Map User to Role"
                 UserId="@idtopass"
                 OnClose="@OnDeleteDialogClose"
    >
    </ModalDialogRoles>
}
</div>

@code {
    public bool DeleteDialogOpen { get; set; }
    QAD_QMSContext db = new QAD_QMSContext();
    AspNetUsers users = new AspNetUsers();
    IdentityRole roles = new IdentityRole();
    public bool hide { get; set; } = true;
    private string idtopass{ get; set; }
    public IEnumerable<AspNetUsers> GetList { get; set; }
    public bool HideAlert { get; set; } = true;
    public string AlertMessage { get; set; } = string.Empty;
    public string AlertType { get; set; } = "danger";
    private void resetalert()
    {
        AlertMessage = string.Empty;
        AlertType = "danger";
        HideAlert = true;
    }
    private void AlertShow(string type, string msg)
    {
        AlertMessage = msg;
        AlertType = type;
        HideAlert = false;
    }
    public async Task SaveGeneralInformation()
    {
        try
        {
            if(users.Id == string.Empty)
            {
                AlertShow("danger","Please select a user to update!");
                hide = true;
                return;
            }
            else
            {
                users = await db.AspNetUsers.FirstOrDefaultAsync(x => x.Id == users.Id);
                users.UserName = users.UserName;
                users.NormalizedUserName = users.UserName.ToUpper();
                users.Email = users.UserName;
                users.NormalizedEmail = users.UserName.ToUpper();
                db.AspNetUsers.Update(users);
            }
            await db.SaveChangesAsync();
            GetList = await GetListM();
            users = new AspNetUsers();
            hide = true;
        }
        catch(Exception ex)
        {
            ex.InnerException.ToString();
            ex.Message.ToString();
        }
    }
    protected void Clear()
    {
        hide = true;
        users = new AspNetUsers();
    }
    protected override async Task OnInitializedAsync()
    {
        GetList = await GetListM();
    }
    public async Task<IEnumerable<AspNetUsers>> GetListM()
    {
        return await db.AspNetUsers.ToListAsync();
    }
    protected async Task MarkAsDeleted(string id)
    {
        bool confirmed = await js.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            var user = await db.AspNetUsers.FirstOrDefaultAsync(x => x.Id == id);
            db.AspNetUsers.Remove(user);
            await db.SaveChangesAsync();
            GetList = await GetListM();
            users = new AspNetUsers();
        }
    }
    protected async Task ToEdit(string id)
    {
        hide = false;
        users = await db.AspNetUsers.FirstOrDefaultAsync(x => x.Id == id);
    }
    private async Task OnDeleteDialogClose()
    {
        await Task.Run(()=>DeleteDialogOpen = false);
        StateHasChanged();
    }
    private void OpenDeleteDialog(string id)
    {
        idtopass = id;
        DeleteDialogOpen = true;
        StateHasChanged();
    }

}
