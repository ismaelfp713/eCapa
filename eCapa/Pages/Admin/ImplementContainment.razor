@page "/Admin/containment/{IdContainment}"
@using System.Security.Claims;
@using Microsoft.AspNetCore.Http
@using eCapa.Services
@using BlazorInputFile

@attribute [Authorize]
@inject IJSRuntime js
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager
@inject IFileUpload fileUpload

<div class="container-fluid">
    <EditForm Model="@d3" OnValidSubmit="@SaveGeneralInformation" class="">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="alert alert-primary" role="alert">
            Provide information on the work done for the task. Include any comment and documentation as evidence of work!
        </div>
        <div class="form-group card">
            <div class="card-header">
                <h3 class="mb-3 ">Containment Action Information:</h3>               
            </div>
            <div class="card-body">
                <div class="form-row">
                           @if(d3.IdDthree != 0)
                           {
                            <div class="table-responsive">
                                <table class="table table-bordered table-striped table-sm small">
                                    <thead class="thead-light">
                                        <tr>                                            
                                            <th>Task Owner</th>                                                
                                            <th>Task Due Date</th>
                                            <th>Task Detail</th>                                          
                                        </tr>
                                    </thead>
                                    <tbody>                                       
                                        <tr>                                                                                         
                                            <td>@d3.ResponsibleNavigation.NormalizedUserName</td>                                                    
                                            <td>@d3.DueDate.ToShortDateString()</td> 
                                            <td colspan="3">@d3.Action</td>                                                 
                                        </tr>                                        
                                    </tbody>
                                </table>
                            </div>
                           }
                    <div class="form-group col-sm-12 col-md-12">
                        <label>Comment:</label>
                        <InputTextArea @bind-Value="d3.Comment" rows="4" class="form-control" placeholder="Information on the work done for the task." />
                    </div>
                     <div class="form-group col-sm-12 col-md-12">
                        <InputFile OnChange="HandleFileSelected" multiple hidden="@hideFileUploadButton" />
                    </div>
                     @if (!String.IsNullOrEmpty(d3.Evidence))
                    {
                        <div class="table-responsive">
                            <table class="table table-bordered table-striped table-sm small">
                                <thead class="thead-light">
                                    <tr>                                        
                                        <th colspan="2">Evidence</th>                                       
                                    </tr>
                                </thead>
                                <tbody>                                    
                                    <tr>
                                        <td colspan="2">
                                            <a href="/Upload/@d3.GeneralInformartion.CapaNumber/CONTAINMENT/@d3.IdDthree.ToString()/@d3.Evidence" class="ml-4">
                                                <img class="img-thumbnail" src="/Upload/@d3.GeneralInformartion.CapaNumber/CONTAINMENT/@d3.IdDthree.ToString()/@d3.Evidence"/>
                                            </a>
                                        </td>
                                    </tr>                                    
                                </tbody>
                            </table>
                        </div>
                    }
                  
                </div>  
            </div>          
            <div class="card-footer">
                <button type="submit" class="btn btn-primary bn-sm float-right">Mark as Complete</button>
                <button type="button" class="btn btn-info  bn-sm float-left" @onclick="@(() => navigate())">Back to List</button>
            </div>
        </div>
    </EditForm>
</div>
@code {
    IFileListEntry file;
    public bool PictureDialogOpen { get; set; }
    protected string FilePaths { get; set; }
    private readonly IWebHostEnvironment _environment;
    QAD_QMSContext db = new QAD_QMSContext();
    Dthree d3 {get;set;} = new Dthree();
    [Parameter]
    public string IdContainment { get; set; }
    public bool hideFileUploadButton { get; set; } = false;
    public int IdContainmentNumber { get; set; }
    public string CarIdNumber{get;set;}
    public string loggedInUser {get; set;}
    public IEnumerable<AspNetUsers> GetResponsibles { get; set; }
    public bool hide { get; set; } = true;
    public async Task SaveGeneralInformation()
    {
        d3.LastModifiedBy = loggedInUser;
        d3.LastModifiedOn = DateTime.Now;
        d3.Status = "Pending Verification";
        d3.MarkedAsCompleted = DateTime.Now;
        db.Update(d3);
        try
        {
            await db.SaveChangesAsync();
            d3 = await Action();
            await js.InvokeAsync<Task>("alert", $"D3 saved correctly.");
            @* hide = false; *@
        GetLoggedInUser();
    }
    catch (Exception ex)
    {
        ex.InnerException.ToString();
        ex.Message.ToString();
    }
}
protected override async Task OnInitializedAsync()
{
    if (string.IsNullOrEmpty(IdContainment))
    {
        IdContainmentNumber = 0;
    }
    else
    {
        IdContainmentNumber = Convert.ToInt32(IdContainment);
    }
    if(IdContainmentNumber != 0)
    {
        await GetInitialData();

        if (d3 != null)
        {
            CarIdNumber = d3.GeneralInformartionId.ToString();
            hide = false;
        }
    }
    if (d3 != null)
    {
        string id = d3.GeneralInformartionId.ToString();
        string path = "CAPA" + id + "/" + "CONTAINMENT" + "/" + IdContainment;
        if (d3.Evidence == null)
        {
            fileUpload.DeleteFileWhenNotSaved(path);
        }
    }
    GetLoggedInUser();
}
protected async Task GetInitialData()
{
    d3 = await Action();
}
protected void navigate()
{
    NavigationManager.NavigateTo($"/implementation");
}
public async Task<Dthree> Action()
{
    d3 = await db.Dthree.Include(x => x.ResponsibleNavigation).Include(x => x.GeneralInformartion).FirstOrDefaultAsync(x => x.IdDthree == IdContainmentNumber);
    return d3;
}
private void GetLoggedInUser()
{
    var principal = HttpContextAccessor.HttpContext.User;
    loggedInUser = principal.FindFirstValue(ClaimTypes.NameIdentifier).ToString();
}
protected async Task HandleFileSelected(IFileListEntry[] files)
{
    var isSaved = await db.Dthree.FirstOrDefaultAsync(x => x.IdDthree == d3.IdDthree);
    if(isSaved == null)
    {
        await js.InvokeAsync<Task>("alert", "Task Must be saved before adding Images");
        return;
    }
    foreach(var f in files)
    {
        d3.Evidence = f.Name;
        string path = "CAPA" + d3.GeneralInformartionId.ToString() + "/" + "CONTAINMENT" + "/" + IdContainment;
        fileUpload.DeleteFileWhenNotSaved(path);
        if (f != null)
        {
            string id = d3.GeneralInformartionId.ToString();
            await fileUpload.UploadAsync(f, "CAPA"+ id +"/CONTAINMENT/" + IdContainment + "/");
        }
    }

}
}
